# QTile config - bar
# by {{ .chezmoi.group }}

# Imports
from libqtile.bar import CALCULATED
from libqtile.lazy import lazy
from libqtile.config import Screen
from libqtile import bar, widget
from libqtile.utils import send_notification
import subprocess

# Extras imports
from {{ .wm }}_extras import widget as extras
from {{ .wm }}_extras.widget.decorations import RectDecoration

# Local imports
from core.keys import browser, powermenu
from core.palette import palette
from extras import *


# Wallpaper
wallpaper = "~{{ .chezmoi.pathSeparator }}.local{{ .chezmoi.pathSeparator }}wallpapers{{ .chezmoi.pathSeparator }}evening-sky-flipped.png"

# Bar configuration
bar_size = 20
bar_background = palette.base
bar_border_color = palette.base
bar_border_width = 2

widget_defaults = dict(
    font="JetBrainsMono NFP",
    fontsize=14,
    # padding=2,
)
extension_defaults = widget_defaults.copy()


# Base widget configuration
def base(fg = palette.lavender, bg = None, shadow = palette.crust) -> dict{{ .chezmoi.pathListSeparator }}
    return {
        "foreground"{{ .chezmoi.pathListSeparator }} fg,
        "background"{{ .chezmoi.pathListSeparator }} bg,
        "fontshadow"{{ .chezmoi.pathListSeparator }} shadow
    }

def symbol(size=18, offset=0) -> dict{{ .chezmoi.pathListSeparator }}
    return {
        "fontsize"{{ .chezmoi.pathListSeparator }} size,
        "offset"{{ .chezmoi.pathListSeparator }} offset,
    }

def separator(offset=0, padding=10){{ .chezmoi.pathListSeparator }}
    return widget.TextBox(
        **base(),
        offset=offset,
        text="󰇙",
    )

def spacer(width=10){{ .chezmoi.pathListSeparator }}
    return widget.Spacer(
        **base(),
        length=width,
    )

def rectangle(side="", radius=4){{ .chezmoi.pathListSeparator }}
    return {
        "decorations"{{ .chezmoi.pathListSeparator }} [
            RectDecoration(
                filled=True,
                radius={
                    "left"{{ .chezmoi.pathListSeparator }} [radius, 0, 0, radius],
                    "right"{{ .chezmoi.pathListSeparator }} [0, radius, radius, 0],
                }.get(side, radius),
                use_widget_background=True,
            )
        ]
    }


# Widgets
os_icon = lambda fg, bg, shadow{{ .chezmoi.pathListSeparator }} modify(
    widget.TextBox,
    **base(fg, bg, shadow),
    **rectangle(),
    text="",
    mouse_callbacks={
        "Button1"{{ .chezmoi.pathListSeparator }} lazy.spawn("rofi -modi run,drun,window -show drun -sidebar-mode -show-icons"),
        "Button2"{{ .chezmoi.pathListSeparator }} lazy.restart(),
        "Button3"{{ .chezmoi.pathListSeparator }} lazy.spawn("powermenu"),
    },
)

updates = lambda fg, bg, shadow{{ .chezmoi.pathListSeparator }} modify(
    widget.CheckUpdates,
    **base(fg, bg, shadow),
    # **rectangle(),
    # initial_text="No updates",
    colour_have_updates=palette.green,
    display_format=" {updates}",
    padding=10,
    update_interval=3600,
    execute="kitty -e yay -Syu --noconfirm --sudoloop --cleanafter",
)


desktops = lambda bg{{ .chezmoi.pathListSeparator }} GroupBox(
    **symbol(),
    **base(),
    disable_drag=True,
    colors=[
        palette.blue,
        palette.peach,
        palette.red,
        palette.rosewater,
        palette.text,
        palette.subtext1,
        palette.lavender,
        palette.lavender,
        palette.green,
    ],
    highlight_color=palette.crust,
    highlight_method="line",
    inactive=palette.surface0,
    # fontshadow=palette.crust,
    borderwidth=2,
    # padding=4,
    rainbow=True,
    # rounded=True,
    # toggle=True,
    urgent_alert_method="border",
    urgent_border="FF0000",
    urgent_text="FF0000",
    # visible_groups=None,
)

window_name = lambda{{ .chezmoi.pathListSeparator }} modify(
    widget.WindowName,
    **base(),
    max_chars=50,
    # width=300,
    # scroll=True,
)

current_player = "spotify"  # Default player

def get_player_info(){{ .chezmoi.pathListSeparator }}
    global current_player
    try{{ .chezmoi.pathListSeparator }}
        # Single call to playerctl to get all required information
        output = subprocess.check_output([
            'playerctl', '-p', current_player,
            'metadata', '--format',
            '{{ "{{" }}status{{ "}}" }}\n{{ "{{" }}artist{{ "}}" }} - {{ "{{" }}title{{ "}}" }}'
        ]).decode('utf-8').strip().split('\n')

        if len(output) == 2{{ .chezmoi.pathListSeparator }}
            status, metadata = output
            icon = "󰐊" if status == "Playing" else "󰏤"
            return True, f"{icon} {metadata}"
        else{{ .chezmoi.pathListSeparator }}
            raise subprocess.CalledProcessError(1, 'playerctl')
    except subprocess.CalledProcessError{{ .chezmoi.pathListSeparator }}
        return False, ""

def get_active_players(){{ .chezmoi.pathListSeparator }}
    try{{ .chezmoi.pathListSeparator }}
        return subprocess.check_output(['playerctl', '-l']).decode('utf-8').strip().split('\n')
    except subprocess.CalledProcessError{{ .chezmoi.pathListSeparator }}
        return []

def cycle_media_player({{ .wm }}){{ .chezmoi.pathListSeparator }}
    global current_player
    players = get_active_players()
    if not players{{ .chezmoi.pathListSeparator }}
        send_notification("{{ .wm }}", "No active media players found")
        return

    current_index = players.index(current_player) if current_player in players else -1
    next_index = (current_index + 1) % len(players)
    current_player = players[next_index]
    send_notification("{{ .wm }}", f"Switched to {current_player}")

def player_command(command){{ .chezmoi.pathListSeparator }}
    def f({{ .wm }}){{ .chezmoi.pathListSeparator }}
        subprocess.Popen(['playerctl', '-p', current_player, command])
    return f

def get_player_status(){{ .chezmoi.pathListSeparator }}
    global current_player
    success, status = get_player_info()
    if not success{{ .chezmoi.pathListSeparator }}
        players = get_active_players()
        if players{{ .chezmoi.pathListSeparator }}
            current_player = players[0]
            success, status = get_player_info()
    return status

player = lambda{{ .chezmoi.pathListSeparator }} widget.GenPollText(
    **base(palette.peach),
    func=get_player_status,
    update_interval=2,
    # width=400,
    mouse_callbacks={
        "Button1"{{ .chezmoi.pathListSeparator }} lazy.function(player_command('play-pause')),
        "Button2"{{ .chezmoi.pathListSeparator }} lazy.group['0'].toscreen(),
        "Button3"{{ .chezmoi.pathListSeparator }} lazy.function(cycle_media_player),
        "Button4"{{ .chezmoi.pathListSeparator }} lazy.function(player_command('next')),
        "Button5"{{ .chezmoi.pathListSeparator }} lazy.function(player_command('previous')),
    },
)

def mic_icon(){{ .chezmoi.pathListSeparator }}
    try{{ .chezmoi.pathListSeparator }}
        mute = subprocess.check_output("pactl get-source-mute @DEFAULT_SOURCE@", shell=True, stderr=subprocess.STDOUT).decode()
        if "yes" in mute{{ .chezmoi.pathListSeparator }}
            return "󰍭"
        return "󰍬"
    except subprocess.CalledProcessError as e{{ .chezmoi.pathListSeparator }}
        logging.error(f"Error executing pactl command{{ .chezmoi.pathListSeparator }} {e.output.decode()}")
        return "E1"
    except Exception as e{{ .chezmoi.pathListSeparator }}
        logging.error(f"Unexpected error in mic_icon{{ .chezmoi.pathListSeparator }} {str(e)}")
        return "E2"

microphone = lambda{{ .chezmoi.pathListSeparator }} modify(
    widget.GenPollText,
    **base(),
    **symbol(),
    func=mic_icon,
    update_interval=1,
    padding=4,
    width=20,
    mouse_callbacks={
        "Button1"{{ .chezmoi.pathListSeparator }} lazy.spawn("pactl set-source-mute @DEFAULT_SOURCE@ toggle"),
        "Button2"{{ .chezmoi.pathListSeparator }} lazy.spawn("pavucontrol")
    },
)

volume = lambda{{ .chezmoi.pathListSeparator }} [
    modify(
        widget.Volume,
        **base(),
        **symbol(),
        # **rectangle("left"),
        emoji=True,
        emoji_list=["󰝟", "󰕿", "󰖀", "󰕾"],
        width=20,
        step=5,
        mouse_callbacks={
            "Button1"{{ .chezmoi.pathListSeparator }} lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle"),
            "Button2"{{ .chezmoi.pathListSeparator }} lazy.spawn("pavucontrol")
        },
    ),
    modify(
        widget.Volume,
        **base(),
        # **rectangle("right"),
        width=40,
        step=5,
        mouse_callbacks={
            "Button1"{{ .chezmoi.pathListSeparator }} lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle"),
            "Button2"{{ .chezmoi.pathListSeparator }} lazy.spawn("pavucontrol")
        },
    ),
]

def get_brightness(){{ .chezmoi.pathListSeparator }}
    try{{ .chezmoi.pathListSeparator }}
        # Get the brightness as a float
        brightness = float(subprocess.check_output(["brillo", "-q", "-G"]).decode().strip())
        icon = "󰛨"

        # Update icon based on brightness level
        if brightness < 10{{ .chezmoi.pathListSeparator }}
            icon = "󱩎"
        elif brightness < 20{{ .chezmoi.pathListSeparator }}
            icon = "󱩏"
        elif brightness < 30{{ .chezmoi.pathListSeparator }}
            icon = "󱩐"
        elif brightness < 40{{ .chezmoi.pathListSeparator }}
            icon = "󱩑"
        elif brightness < 50{{ .chezmoi.pathListSeparator }}
            icon = "󱩒"
        elif brightness < 60{{ .chezmoi.pathListSeparator }}
            icon = "󱩓"
        elif brightness < 70{{ .chezmoi.pathListSeparator }}
            icon = "󱩔"
        elif brightness < 80{{ .chezmoi.pathListSeparator }}
            icon = "󱩕"
        elif brightness < 90{{ .chezmoi.pathListSeparator }}
            icon = "󱩖"

        return f"{icon} {brightness{{ .chezmoi.pathListSeparator }}.0f}%"  # Format brightness as an integer percentage
    except subprocess.CalledProcessError{{ .chezmoi.pathListSeparator }}
        return "Error"

backlight = lambda{{ .chezmoi.pathListSeparator }} modify(
    widget.GenPollText,
    **base(),
    # **symbol(),
    func=get_brightness,
    update_interval=5,
    # padding=4,
    width=62,
    mouse_callbacks={
        "Button4"{{ .chezmoi.pathListSeparator }} lazy.spawn("brillo -qA 2"), # Scroll up
        "Button5"{{ .chezmoi.pathListSeparator }} lazy.spawn("brillo -qU 2"), # Scroll down
    },
)

bluetooth = lambda{{ .chezmoi.pathListSeparator }} modify(
    extras.Bluetooth,
    **base(),
    # **symbol(),
    active_colour=palette.text,
    inactive_colour=palette.surface0,
    error_colour=palette.red,
    default_text="",
    # default_text="",
    # check_interval=5,
    # check_timeout=5,
    # decorations=[],
    # font=,
    # fontsize=,
    # foreground=,
    # interface=,
    # padding=6,
    # padding_x=8,
    # padding_y=5,
    # update_interval=,
    # visible=True,
    # mouse_callbacks={
    #     "Button1"{{ .chezmoi.pathListSeparator }} lazy.spawn("blueman-manager"),
    # },
)


wifi = lambda{{ .chezmoi.pathListSeparator }} modify(
    WiFiIcon,
    **base(),
    # **symbol(),
    active_colour=palette.lavender,
    # background=palette.base,
    check_connection_interval=60,
    disconnected_colour=palette.red,
    inactive_colour=palette.surface0,
    # expanded_timeout=10,
    # decorations=[],
    # font=,
    # fontsize=,
    # foreground=,
    # interface=wlan0,
    internet_check_host="1.1.1.1",
    # internet_check_port=53,
    # internet_check_timeout=5,
    # mouse_callbacks={},
    # padding=6,
    # padding_x=8,
    # padding_y=5,
    # show_ssid=True,
    # update_interval=,
    # wifi_arc=80,
    mouse_callbacks={
        "Button3"{{ .chezmoi.pathListSeparator }} lazy.spawn("iwctl station wlan0 scan"),
        "Button2"{{ .chezmoi.pathListSeparator }} lazy.spawn("kitty -e iwctl"),
    },
)

battery = lambda{{ .chezmoi.pathListSeparator }} modify(
    widget.Battery,
    **base(),
    # **symbol(),
    charge_char="+",
    discharge_char="-",
    empty_char="x",
    format="{char}{percent{{ .chezmoi.pathListSeparator }}2.0%} {hour{{ .chezmoi.pathListSeparator }}d}{{ .chezmoi.pathListSeparator }}{min{{ .chezmoi.pathListSeparator }}02d}",
    # full_char="",
    notify_below=20,
    update_interval=10,
)

system_tray = lambda{{ .chezmoi.pathListSeparator }} modify(
    extras.Systray,
    **base(),
    padding=5,
)

def open_github_notifications({{ .wm }}){{ .chezmoi.pathListSeparator }}
    # Open the GitHub notifications page with the default browser
    {{ .wm }}.cmd_spawn(f"{browser} https{{ .chezmoi.pathListSeparator }}{{ .chezmoi.pathSeparator }}{{ .chezmoi.pathSeparator }}github.com{{ .chezmoi.pathSeparator }}notifications")
    # Focus the second desktop (replace '2' with the actual group name if different)
    {{ .wm }}.groups_map['2'].toscreen()

github = lambda{{ .chezmoi.pathListSeparator }} modify(
    extras.GithubNotifications,
    **base(),
    **symbol(),
    active_colour=palette.peach,
    inactive_colour=palette.surface0,
    error_colour=palette.red,
    token_{{ .chezmoi.config.mode }}="~{{ .chezmoi.pathSeparator }}.config{{ .chezmoi.pathSeparator }}{{ .wm }}{{ .chezmoi.pathSeparator }}github.token",
    mouse_callbacks={
        "Button1"{{ .chezmoi.pathListSeparator }} lazy.function(open_github_notifications),
    },
)

clock = lambda bg, fg, shadow{{ .chezmoi.pathListSeparator }} modify(
    Clock,
    **base(bg, fg, shadow),
    **rectangle(),
    format="%a %d{{ .chezmoi.pathSeparator }}%m %H{{ .chezmoi.pathListSeparator }}%M",  # Date and time format
    long_format="%a %d %B %Y %H{{ .chezmoi.pathListSeparator }}%M{{ .chezmoi.pathListSeparator }}%S",
    # fmt="󱑃 {}",
)

# Widgets list
widgets = [
    os_icon(palette.base, palette.lavender, None),
    updates(palette.lavender, palette.base, None),
    desktops(None),
    window_name(),

    # widget.Spacer(),
    widget.Spacer(length=bar.STRETCH),  # Stretch to take available space
    player(),
    # widget.Spacer(),
    widget.Spacer(length=bar.STRETCH),  # Stretch to take available space

    microphone(),
    *volume(),
    bluetooth(),
    wifi(),
    {{ "{{" }}- if .laptop {{ "}}" }}
    backlight(),
    battery(),
    {{ "{{" }}- end {{ "}}" }}

    system_tray(),
    github(),
    spacer(),
    clock(palette.base, palette.lavender, None),
]

# Screen configuration
screens = [
    Screen(
        wallpaper="~{{ .chezmoi.pathSeparator }}.local{{ .chezmoi.pathSeparator }}wallpapers{{ .chezmoi.pathSeparator }}evening-sky-flipped.png",
        wallpaper_mode="fill",
        top=bar.Bar(
            widgets,
            size=bar_size,
            background=bar_background,
            border_color=bar_border_color,
            border_width=bar_border_width,
        ),
    ),
]
