# Remove fish greeting
set fish_greeting

#
## ALIASES
#

# Quick aliases
command -q vim; and alias v='vim'
{{- if eq .osid "linux-arch" }}
command -q nvim; and alias v='nvim'
command -q codium; and alias code='codium'
{{- end }}
alias rename='perl-rename'
alias ka='killall'
alias ipa='curl ifconfig.me'
alias se='sudoedit'
alias df='df -h'
alias dus='du -sh'
alias fdd='fd -ui'
#alias free='free -m'


# Ls
alias ls='lsd --group-dirs first --hyperlink auto' # shows directories first
alias l='ls -l' # detailed ls
alias la='ls -A' # ls with hidden files
alias ll='ls -lA' # detailed ls with hidden files
alias lt='ls --tree'
alias lta='lt -A'

# Pasting
alias copyfile='xclip -selection clipboard -in'
alias pastefile='xclip -selection clipboard -out'


# Kitty
[ "$TERM" = "xterm-kitty" ] && alias s="kitty +kitten ssh"
[ "$TERM" = "xterm-kitty" ] && alias d="kitty +kitten diff"
[ "$TERM" = "xterm-kitty" ] && alias icat="kitty +kitten icat"
[ "$TERM" = "xterm-kitty" ] && alias g="kitty +kitten hyperlinked_grep"


# Git related
alias gitpullrecursive='find . -type d -name .git -exec sh -c "cd \"{}\"/../ && pwd && git pull" \;'
alias gcl='git clone'
alias gps='git push'
alias gpl='git pull'
alias gst='git status -s'
alias gstt='git status'
alias gsm='git submodule'
alias gad='git add'
alias gdf='git diff'
alias gdd="git difftool --no-symlinks --dir-diff"
alias gcm='git commit -m'
alias gchm='git commit --amend -m'
alias gls='git ls-files'
alias glsn='git ls-files | wc -l'
alias gco='git checkout'
alias gbr="git branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate"
alias glg='git log --oneline --graph | head -n 15'
alias glgg='git log --oneline --graph'
#git log --pretty=format:"%C(yellow)%h %Creset%s %Cblue[%cn]"
alias glgd='git log --pretty=format:"%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn]" --decorate --date=short'
alias glga='git log --pretty=format:"%C(yellow)%h %ad%Cred%d | %Creset%s%Cblue [%cn]" --decorate --date=short'
alias glgr='git log --pretty=format:"%C(yellow)%h %ad%Cred%d | %Creset%s%Cblue [%cn]" --decorate --date=relative'
alias glgc='git log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat'


# chezmoi
alias cz='chezmoi'
alias cad='cz add'
alias ced='cz edit --apply'
alias cedit='cz edit'
alias cdf='cz diff'
alias cst='cz status'
alias czu='cz update'


{{- if eq .osid "linux-arch" }}
# yay aliases with descriptions

# Basic yay command
alias y='yay'

# File search in package database
alias yf='y -Fy'

# Query package that owns a file
alias yq='y -Qo'

# Install a package
alias ys='y -S'

# Search for a package
alias yss='y -Ss'

# Remove a package and its dependencies
alias yr='y -Rcnss'

# Update system and AUR packages
alias yy='y -Syu --sudoloop --noconfirm'

# Clean unneeded dependencies
alias yo='y -Yc'

# Clean package cache
alias yc='y -Sc'

# Clean all package cache
alias ycc='y -Scc'

# List orphaned packages
alias yao='yay -Qtd'

# Remove orphaned packages
alias yro='yay -Rns $(yay -Qtdq)'

# Get detailed information about a package
alias yi='yay -Si'

# List files owned by a package
alias ylf='yay -Ql'

# Check for outdated AUR packages
alias yau='yay -Qua'

# Show package dependency tree
alias ydt='yay -Qi'

# Function to display alias descriptions
yay_help() {
    echo "Yay Alias Descriptions:"
    echo "y    - Basic yay command"
    echo "yf   - File search in package database"
    echo "yq   - Query package that owns a file"
    echo "ys   - Install a package"
    echo "yss  - Search for a package"
    echo "yr   - Remove a package and its dependencies"
    echo "yy   - Update system and AUR packages"
    echo "yo   - Clean unneeded dependencies"
    echo "yc   - Clean package cache"
    echo "ycc  - Clean all package cache"
    echo "yao  - List orphaned packages"
    echo "yro  - Remove orphaned packages"
    echo "yi   - Get detailed information about a package"
    echo "ylf  - List files owned by a package"
    echo "yau  - Check for outdated AUR packages"
    echo "ydt  - Show package dependency tree"
}

# Alias for the help function
alias yhelp='yay_help'


# pacman
alias unlock_pacman='sudo rm /var/lib/pacman/db.lck'
alias unlock_sudo='faillock --user $USER --reset'
alias pacman_cache='paccache -ruvk 0 && paccache -rvk 2'
alias pacman_orphaned='sudo pacman -Rns (pacman -Qtdq)' # Remove orphaned packages
alias mirror_update='curl -s "https://archlinux.org/mirrorlist/?country=FR&country=GB&country=DE&protocol=https&use_mirror_status=on" | sed -e "s/^#Server/Server/" -e "/^#/d" | rankmirrors -n 5 -'


# systemctl
alias senable='sudo systemctl enable'
alias sdisable='sudo systemctl disable'
alias sstart='sudo systemctl start'
alias srstart='sudo systemctl restart'
alias sstop='sudo systemctl stop'
alias sstatus='sudo systemctl status'
alias slist='systemctl list-unit-files --state=enabled'

# yt-dlp
alias ytd='yt-dlp'
# audio-only 
alias yta='yt-dlp --config-location ~/.config/yt-dlp/audio-config'


# Misc
alias grub_regen='sudo grub-mkconfig -o /boot/grub/grub.cfg'
alias conda_init='eval "$(/home/maplepy/.miniconda3/bin/conda shell.fish hook)"'
{{- end }}
{{- if eq (output "fish" "-v" | trim) "3.1.0" }}
alias pastehere='sleep 2; xdotool type "$(xclip -o -selection clipboard)"'
{{- end }}
alias cleanemptydir='find . -type d -empty -delete' # remove empty directories

alias fishreload='source ~/.config/fish/config.fish'

#
## FUNCTIONS
function mkexdirs
  for i in (seq -w 00 $argv[1])
	mkdir -p ex$i
  end
end

function mkhtml
    set -l copy_mode 0
    if test "$argv[1]" = "-c"
        set copy_mode 1
    end

    # Find the highest number used in existing HTML files
    set highest_num (ls -1 index_*.html 2>/dev/null | string replace -r 'index_(\d+)\.html' '$1' | sort -n | tail -n1)

    # Determine the next number to use
    set next_num (math "$highest_num + 1")

    set css_file "css/styles_$next_num.css"
    set html_file "index_$next_num.html"

    if test $copy_mode -eq 1
        # Copy the previous files
        set prev_css_file "css/styles_$highest_num.css"
        set prev_html_file "index_$highest_num.html"

        if test -f $prev_html_file; and test -f $prev_css_file
            cp $prev_html_file $html_file
            cp $prev_css_file $css_file

            # Update the CSS link in the HTML file
            set temp_file (mktemp)
            sed "s/styles_$highest_num\.css/styles_$next_num\.css/" $html_file > $temp_file
            mv $temp_file $html_file

            echo "Copied and updated files from $highest_num to $next_num"
        else
            echo "Previous files not found. Creating new files."
            create_new_files $css_file $html_file
        end
    else
        # Create new files
        create_new_files $css_file $html_file
    end

    # Open both files in VSCode
    code $html_file $css_file

    echo "Created $css_file and $html_file"
end

function create_new_files
    set css_file $argv[1]
    set html_file $argv[2]

    echo "body {
  margin: 10px;
}" > $css_file

    echo "<!DOCTYPE html>
<html lang=\"en\">
<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>Document</title>
    <link rel=\"stylesheet\" href=\"css/normalize.css\" />
    <link rel=\"stylesheet\" href=\"$css_file\" />
</head>
<body>

</body>
</html>" > $html_file
end

function docker_container_ports
    # Get the list of running containers
    set containers (docker ps --format "{{`{{.Names}}`}}")
    
    # Check if there are no running containers
    if test (count $containers) -eq 0
        echo "No running Docker containers found."
        return
    end

    # Loop through each container and get its port mappings
    for container_name in $containers
        echo "Container: $container_name"
        set ports (docker port $container_name)
        
        if test (count $ports) -eq 0
            echo "  Ports: None"
        else
            for port in $ports
                echo "  $port"
            end
        end
        echo ""
    end
end

#
## EXPORTS
#

{{- if eq .osid "linux-arch" }}
# export PATH='":$PATH
export EDITOR='vim'
export VISUAL='vim'
export SUDO_EDITOR=$EDITOR
#export MANPAGER='nvim +Man!'
export MANWIDTH=999
{{- else if eq .osid "linux-ubuntu" }}
export LD_LIBRARY_PATH="$HOME/sgoinfre/lib:$LD_LIBRARY_PATH"

# Generated for envman. Do not edit.
test -s "$HOME/.config/envman/load.fish"; and source "$HOME/.config/envman/load.fish"
{{- end }}

## Jump 
function __jump_add --on-variable PWD
  status --is-command-substitution; and return
  jump chdir
end

function __jump_hint
  set -l term (string replace -r '^j ' '' -- (commandline -cp))
  jump hint "$term"
end

function j
  set -l dir (jump cd "$argv")
  test -d "$dir"; and cd "$dir"
end

complete --command j --exclusive --arguments '(__jump_hint)'
