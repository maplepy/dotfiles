#!/bin/bash
# chezmoi run_once script: Install Hyprland and config dependencies
# This script will run once when you apply chezmoi.

set -e

# Only run if Hyprland is the selected window manager in chezmoi data
if ! chezmoi data | grep -q '"wm": "hyprland"'; then
    echo "[chezmoi] Skipping Hyprland package install: wm is not set to 'hyprland' in chezmoi data."
    exit 0
fi

# Ensure git is installed
if ! command -v git &>/dev/null; then
    echo "git is not installed. Installing git..."
    sudo pacman -S --noconfirm git
fi

# Ensure paru is installed
if ! command -v paru &>/dev/null; then
    git clone https://aur.archlinux.org/paru.git /tmp/paru
    cd /tmp/paru || exit 1
    makepkg -si
    cd - || exit 1
    rm -rf /tmp/paru
else
    echo "paru is already installed."
fi


ensure_installed() {
    if ! paru -Q "$1" >/dev/null 2>&1; then
        echo "Installing $1..."
        paru -S --noconfirm "$1"
    else
        echo "$1 already installed."
    fi
}

# Hyprland core
ensure_installed hyprland
ensure_installed xdg-desktop-portal-hyprland

# Programs from hyprland.conf
pkgs=(
    # Core Hyprland & compositing
    hyprland
    xdg-desktop-portal-hyprland
    hypridle
    hyprlock
    hyprpicker
    hyprsunset
    hyprpolkitagent
    wlogout                 # Graphical logout

    # Terminal & apps
    kitty                       # Terminal
    yazi                        # File manager
    # rofi                      # App launcher
    # sherlock-launcher-bin     # App launcher
    # albert                    # App launcher
    zen-browser-bin             # Web browser
    waybar                      # Top bar
    swaync                      # Notification daemon

    # Wallpaper & theming
    nwg-look                    # Look and feel manager
    papirus-icon-theme          # Icon theme


    swww                        # Wallpaper daemon
    matugen-bin                 # Dynamic color generator
    dart-sass                   # Sass compiler for themes
    python-pywalfox             # Firefox theming with pywal
    # wttrbar                   # Weather bar

    # Shell & prompt
    fish
    fisher

    # Utilities
    7zip                    # Compression utility
    bat                     # Cat but better
    brightnessctl           # Backlight control
    btop                    # Resource management
    cliphist                # Clipboard history
    diff-so-fancy           # Better diff output
    fd                      # Find but better
    grimblast-git           # Region selection for screenshots
    man                     # Manual pages
    pacleaner               # Pacman cache cleaner
    pavucontrol             # Audio control GUI
    playerctl               # Media control
    ripgrep                 # Grep but faster
    wl-clipboard            # Clipboard manager
    yt-dlp                  # Video downloader

    # Dev
    bun-bin

    # Network & Bluetooth
    overskride-bin          # Bluetooth GUI
    bluez                   # Bluetooth daemon
    bluez-libs              # Bluetooth libraries
    bluez-utils             # Bluetooth utilities
    blueman                 # Bluetooth manager

    # Fonts
    # adwaita-fonts
    # cantarell-fonts
    noto-fonts
    noto-fonts-cjk
    noto-fonts-emoji
    noto-fonts-extra
    ttf-apple-emoji
    ttf-dejavu
    ttf-jetbrains-mono-nerd
    ttf-liberation
)

if chezmoi data | grep -q '"hostname": "ceos"'; then
    # Additional packages for maplepy host
    pkgs+=(
        i2c-tools               # I2C tools for hardware control (fix the speakers)
        easyeffects             # Audio effects and routing
        calf                    # Audio plugins
        lsp-plugins             # Audio plugins
        # howdy                 # Facial recognition login
    )
fi

# Additional packages for gaming
if chezmoi data | grep -q '"gaming": true'; then
    pkgs+=(
        steam
        # lutris
        gamemode
        gamescope
        mangohud
        steamtinkerlaunch
        protonup-qt
        wine
        # goverlay
        # winetricks
        # Add any additional gaming-related packages here
    )
fi

for pkg in "${pkgs[@]}"; do
    ensure_installed "$pkg"
done

# Useful extras
extras=(
    ansible
    signal-desktop          # Private messenger
    anytype-bin             # Private notion alternative
    hblock
)

# Interactive selection for extras
printf '\nOptional extras available for install:\n'
for i in "${!extras[@]}"; do
    printf ' [%d] %s\n' "$((i+1))" "${extras[$i]}"
done
printf '\n:: Enter numbers to EXCLUDE (space/comma separated), or press Enter to install all: '
read -r exclude_input

exclude_arr=()
if [[ -n "$exclude_input" ]]; then
    # Split input by space or comma
    IFS=', ' read -r -a exclude_arr <<< "$exclude_input"
fi

# Build filtered extras list
filtered_extras=()
for i in "${!extras[@]}"; do
    idx=$((i+1))
    skip=false
    for ex in "${exclude_arr[@]}"; do
        if [[ "$idx" == "$ex" ]]; then
            skip=true
            break
        fi
    done
    if ! $skip; then
        filtered_extras+=("${extras[$i]}")
    fi
done

for pkg in "${filtered_extras[@]}"; do
    ensure_installed "$pkg"
done

# Enable and start hyprpolkitagent service for the user
echo -e "\nEnabling hyprpolkitagent service..."
systemctl --user enable --now hyprpolkitagent.service

# --- Additional automation for Hyprland setup ---


# 2. Set fish as the default shell
if command -v fish &>/dev/null; then
    read -rp "Do you want to set fish as your default shell? [y/N]: " set_fish_shell
    if [[ "$set_fish_shell" =~ ^[Yy]$ ]]; then
        fish_path="$(command -v fish)"
        echo -e "\nSetting fish as the default shell..."
        chsh -s "$fish_path"
    else
        echo "Skipping setting fish as the default shell."
    fi
else
    echo "fish shell not installed, skipping chsh."
fi

# 3. Update fish plugins with fisher
if command -v fish &>/dev/null && fish -c "type -q fisher"; then
    FISHER_UPDATE_STAMP="$HOME/.cache/fisher_update.stamp"
    now_epoch=$(date +%s)
    last_update_epoch=0
    if [[ -f "$FISHER_UPDATE_STAMP" ]]; then
        last_update_epoch=$(cat "$FISHER_UPDATE_STAMP" 2>/dev/null || echo 0)
    fi
    # 7 days = 604800 seconds
    if (( now_epoch - last_update_epoch < 604800 )); then
        echo "Fisher plugins were updated less than 7 days ago, skipping update."
    else
        echo -e "\nUpdating fish plugins with fisher..."
        fish -c "fisher update"
        echo "$now_epoch" > "$FISHER_UPDATE_STAMP"
    fi
else
    echo "fisher not installed, skipping plugin update."
fi

# 4. Setup the fish prompt with tide
if command -v fish &>/dev/null && fish -c "type -q tide"; then
    read -rp "Do you want to configure the tide prompt now? [y/N]: " setup_tide
    if [[ "$setup_tide" =~ ^[Yy]$ ]]; then
        echo -e "\nSetting up tide prompt..."
        fish -c "tide configure"
    else
        echo "Skipping tide prompt setup."
    fi
else
    echo "tide prompt not installed, skipping setup."
fi

# Setup pacman with colors and parallel downloads
if command -v pacman &>/dev/null; then
    read -rp $'\nDo you want to configure pacman with colors and parallel downloads? [y/N]: ' configure_pacman
    if [[ "$configure_pacman" =~ ^[Yy]$ ]]; then
        echo -e "\nConfiguring pacman with colors and parallel downloads..."
        sudo sed -i 's/#Color/Color/' /etc/pacman.conf
        sudo sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 10/' /etc/pacman.conf
    else
        echo "Skipping pacman configuration."
    fi
else
    echo "pacman not found, skipping pacman configuration."
fi


# 1. Run matugen for one image in ~/images/wallpaper/
WALLPAPER_DIR="$HOME/images/wallpapers"
if command -v matugen &>/dev/null && [ -d "$WALLPAPER_DIR" ]; then
    first_img="$(find "$WALLPAPER_DIR" -type f | head -n 1)"
    if [[ -n "$first_img" ]]; then
        echo -e "\nRunning matugen for: $first_img"
        matugen image "$first_img"
    else
        echo "No images found in $WALLPAPER_DIR, skipping matugen step."
    fi
else
    echo "matugen not installed or $WALLPAPER_DIR does not exist, skipping matugen step."
fi

echo -e "\e[32m\nAll done! Hyprland and dependencies are installed.\e[0m"
