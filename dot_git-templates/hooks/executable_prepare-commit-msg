#!/bin/bash
# by maplepy
# Git commit message hook to automatically add semantic emojis
# Combines conventional commits with gitmoji standards

declare -A prefix_emoji=(
    # Primary conventional commit types
    ["init"]="🎉"       # Init the project
    ["feat"]="✨"       # New feature
    ["fix"]="🐛"        # Bug fix
    ["docs"]="📝"       # Documentation 📚
    ["style"]="🎨"      # Code style/formatting
    ["refactor"]="♻️"   # Code refactoring
    ["perf"]="⚡️"        # Performance improvements
    ["test"]="✅"       # Tests 🧪
    ["build"]="👷"      # Build system
    ["ci"]="💚"         # CI/CD
    ["chore"]="🔧"      # Maintenance tasks

    # Additional useful prefixes
    ["deps"]="📦"       # Dependencies
    ["security"]="🔒"   # Security
    ["revert"]="⏪️"     # Revert changes
    ["wip"]="🚧"        # Work in progress
    ["deploy"]="🚀"     # Deployment
    ["config"]="⚙️"      # Configuration changes
)

commit_msg_file="$1"

if [[ ! -f "$commit_msg_file" ]]; then
    echo "Error: Commit message file not found." >&2
    exit 1
fi

commit_msg_content=$(cat "$commit_msg_file")

# Skip if commit already has an emoji (non-ASCII character at the start)
if [[ $commit_msg_content =~ ^[[:space:]]*[^\x00-\x7F] ]]; then
    echo "prepare-commit-msg hook: Commit already has an emoji, skipping." >&2
    exit 0
fi

# Default prefix if no conventional commit prefix is found
default_prefix="refactor"

# Trim leading/trailing whitespace function
trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

prefix=""
scope=""
original_prefix_match=""
message_body_part=""
is_breaking_change=0 # Flag for breaking change

# Extract prefix, scope, breaking change indicator (!), and the rest of the message
# Regex breakdown:
# ^                   - Start of the line
# ([a-zA-Z]+)        - Capture group 1: Type (e.g., feat, fix)
# :                   - Literal colon
# [[:space:]]*        - Optional leading whitespace
# (.*)                - Capture group 5: The rest of the message (CORRECTED from 4)
conventional_commit_pattern='^([a-zA-Z]+)(\\([^)]*\\))?(!?):[[:space:]]*(.*)' # RESTORED original complex pattern, removed local

# Log the exact message content before matching
echo "DEBUG (pre-match): commit_msg_content='${commit_msg_content}'" >> /tmp/git_hook_debug.log

if [[ $commit_msg_content =~ $conventional_commit_pattern ]]; then
    # Check if the first capture group is non-empty
    if [[ -n "${BASH_REMATCH[1]}" ]]; then
        prefix="${BASH_REMATCH[1],,}" # Lowercase prefix
        scope="${BASH_REMATCH[2]}"    # Scope with parens, e.g., (api) - RESTORED
        # Check group 4 for the breaking change indicator '!' - RESTORED
        if [[ -n "${BASH_REMATCH[4]}" ]]; then # CORRECTED INDEX
            is_breaking_change=1
        fi
        # original_prefix_match includes type, scope(parens), and breaking indicator
        original_prefix_match="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[4]}" # RESTORED original logic
        # message_body_part="${BASH_REMATCH[2]}" # SIMPLIFIED FOR TEST (Group 2 is now body)
        message_body_part="${BASH_REMATCH[5]}" # RESTORED (Group 5 is body)
        echo "DEBUG (in if): Regex matched (full pattern), prefix=[$prefix]" >> /tmp/git_hook_debug.log
    else
        # Match succeeded but capture group 1 is empty - treat as no match
        echo "DEBUG (in if-else): Match success but empty capture, prefix set to default: [$prefix]" >> /tmp/git_hook_debug.log
        prefix="$default_prefix"
        message_body_part="$commit_msg_content"
    fi
else
    echo "DEBUG (post-match else): Regex failed to match. commit_msg_content='${commit_msg_content}'" >> /tmp/git_hook_debug.log
    prefix="$default_prefix"
    message_body_part="$commit_msg_content"
    echo "prepare-commit-msg hook: No conventional prefix detected. Assuming '$default_prefix'." >&2
    echo "DEBUG (in else): prefix set to default: [$prefix]" >> /tmp/git_hook_debug.log # Added debug
fi

echo "DEBUG: Extracted prefix: [$prefix]" >&2 # Added for debugging

# Clear/Create debug log file
echo "--- New Commit Amend --- $(date)" > /tmp/git_hook_debug.log
echo "DEBUG: Original message: [$commit_msg_content]" >> /tmp/git_hook_debug.log
echo "DEBUG: Extracted prefix: [$prefix]" >> /tmp/git_hook_debug.log # Added for debugging

final_prefix="$prefix"
emoji=""
body_content=""

# Determine emoji and handle unknown prefixes
echo "DEBUG (before lookup): prefix=[$prefix]" >> /tmp/git_hook_debug.log # Added debug
echo "DEBUG: Emoji lookup result for '$prefix': [${prefix_emoji[$prefix]}]" >> /tmp/git_hook_debug.log # Added for debugging
if [[ -z "${prefix_emoji[$prefix]}" ]]; then
    # If the extracted prefix isn't in our map, use the default prefix
    # and treat the *entire original* message as the body content.
    if [[ "$prefix" != "$default_prefix" ]]; then # Avoid double message if already defaulted
        echo "prepare-commit-msg hook: Unknown prefix '$prefix' found. Defaulting to '$default_prefix'." >&2
    fi
    final_prefix="$default_prefix"
    emoji="${prefix_emoji[$final_prefix]}"
    body_content=$(trim "$commit_msg_content")
    scope="" # Clear scope if we defaulted due to unknown prefix
else
    # Valid prefix found, use its emoji
    emoji="${prefix_emoji[$prefix]}"
    # Use the message part *after* the prefix/scope
    body_content=$(trim "$message_body_part")
fi

# Construct the new commit message
breaking_indicator=""
if [[ $is_breaking_change -eq 1 ]]; then
    breaking_indicator="💥 " # Prepend emoji for breaking change
fi

if [[ -n "$scope" ]]; then
    # Clean scope (remove surrounding parens)
    cleaned_scope=$(echo "$scope" | sed 's/^(\(.*\))$/\1/')
    new_commit_msg="$breaking_indicator$emoji $final_prefix($cleaned_scope): $body_content"
else
    # Ensure scope handling is bypassed if scope is empty (due to simplification)
    # NO - Restore original logic
    new_commit_msg="$breaking_indicator$emoji $final_prefix: $body_content"
fi

echo "$new_commit_msg" > "$commit_msg_file"
