#!/bin/bash
# by maplepy
# Git commit message hook to automatically add semantic emojis
# Combines conventional commits with gitmoji standards

declare -A prefix_emoji=(
    # Primary conventional commit types
    ["init"]="🎉"       # Init the project
    ["feat"]="✨"       # New feature
    ["fix"]="🐛"        # Bug fix
    ["docs"]="📝"       # Documentation 📚
    ["style"]="🎨"      # Code style/formatting
    ["refactor"]="♻️"   # Code refactoring
    ["perf"]="⚡️"        # Performance improvements
    ["test"]="✅"       # Tests 🧪
    ["build"]="👷"      # Build system
    ["ci"]="💚"         # CI/CD
    ["chore"]="🔧"      # Maintenance tasks

    # Additional useful prefixes
    ["deps"]="📦"       # Dependencies
    ["security"]="🔒"   # Security
    ["revert"]="⏪️"     # Revert changes
    ["wip"]="🚧"        # Work in progress
    ["init"]="🎉"       # Initial commit
    ["deploy"]="🚀"     # Deployment

    # Commented out less common prefixes
    #["locale"]="🌐"    # Internationalization
    #["merge"]="🔀"     # Merge
    #["clean"]="🧹"     # Cleanup
    #["debug"]="🔍"     # Debug
    #["remove"]="🔥"    # Replace with chore: cleanup/remove ...
    #["update"]="🔃"    # Replace with refactor
    #["format"]="📐"    # Formatting
    #["deploy"]="🚀"
    #["release"]="🏷️"
    #["gitignore"]="🙈" # Replace with chore(git)
)

commit_msg_file="$1"

if [[ ! -f "$commit_msg_file" ]]; then
    echo "Error: Commit message file not found."
    exit 1
fi

commit_msg_content=$(cat "$commit_msg_file")

# Skip if commit already has an emoji
if [[ $commit_msg_content =~ ^[[:space:]]*[^\x00-\x7F] ]]; then
    echo "Commit has already an emoji, skipping the hook"
    exit 0
fi

# Extract prefix and scope using regex
if [[ $commit_msg_content =~ ^([a-zA-Z]+)(:|\(.*\):?)? ]]; then
    prefix="${BASH_REMATCH[1],,}"
    scope="${BASH_REMATCH[2]}"
else
    prefix="refactor"
fi

if [[ -z "${prefix_emoji[$prefix]}" ]]; then
    prefix="refactor"
    # Keep original commit message intact
    new_commit_msg="${prefix_emoji[$prefix]} $prefix: $commit_msg_content"
else
    commit_msg_content=${commit_msg_content#"${BASH_REMATCH[0]} "}
    if [[ -n "$scope" ]]; then
        # Remove trailing colon if it exists in scope
        scope=${scope%:}
        new_commit_msg="${prefix_emoji[$prefix]} $prefix$scope: $commit_msg_content"
    else
        new_commit_msg="${prefix_emoji[$prefix]} $prefix: $commit_msg_content"
    fi
fi

echo -e "$new_commit_msg" > "$commit_msg_file"
